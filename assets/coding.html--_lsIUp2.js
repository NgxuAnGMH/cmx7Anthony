import{_ as n,c as s,o as a,a as e}from"./app-DscWQGyf.js";const t={},o=e(`<h1 id="创建类-class" tabindex="-1"><a class="header-anchor" href="#创建类-class"><span>创建类 class</span></a></h1><h2 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> val                <span class="token comment"># 节点值</span>
        self<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span> ListNode <span class="token operator">|</span> <span class="token boolean">None</span> <span class="token operator">=</span> <span class="token boolean">None</span>  <span class="token comment"># 指向后继节点的引用</span>
        self<span class="token punctuation">.</span>prev<span class="token punctuation">:</span> ListNode <span class="token operator">|</span> <span class="token boolean">None</span> <span class="token operator">=</span> <span class="token boolean">None</span>  <span class="token comment"># 指向前驱节点的引用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>声明为<code>class</code>，没有 <code>；</code>只有 <code>：</code>。</li><li><code>def __init__</code>传进去的是 <code>self 指针</code>，以及其他构造参数。</li><li>self.<code>val: int</code>，是一个整体，直接 = val。</li><li>其余的则是 self.next<code>:</code> ListNode。</li><li>空值：<code>None</code></li></ol><h2 id="cpp" tabindex="-1"><a class="header-anchor" href="#cpp"><span>CPP</span></a></h2><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>         <span class="token comment">// 节点值</span>
    ListNode <span class="token operator">*</span>next<span class="token punctuation">;</span>  <span class="token comment">// 指向后继节点的指针</span>
    ListNode <span class="token operator">*</span>prev<span class="token punctuation">;</span>  <span class="token comment">// 指向前驱节点的指针</span>
    <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">val</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">prev</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// 构造函数</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>开头声明是 <code>struct</code>。</p><ol><li>定义处最后，也要加一个<code>；</code>。</li></ol></li><li><p>指针类型：结构体 <code>*</code>名称。</p></li><li><p>构造函数简写成<code>：</code>，填充参数值<code>名称（）</code>，然后直接 <code>{}</code>。</p></li><li><p>空值：<code>nullptr</code></p></li></ol><h2 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>Java</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>        <span class="token comment">// 节点值</span>
    <span class="token class-name">ListNode</span> next<span class="token punctuation">;</span>  <span class="token comment">// 指向后继节点的引用</span>
    <span class="token class-name">ListNode</span> prev<span class="token punctuation">;</span>  <span class="token comment">// 指向前驱节点的引用</span>
    <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> val <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment">// 构造函数</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>Java 中没有 * 和 &amp;</li></ol><h2 id="go" tabindex="-1"><a class="header-anchor" href="#go"><span>Go</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> DoublyListNode <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Val  <span class="token builtin">int</span>             <span class="token comment">// 节点值</span>
    Next <span class="token operator">*</span>DoublyListNode <span class="token comment">// 指向后继节点的指针</span>
    Prev <span class="token operator">*</span>DoublyListNode <span class="token comment">// 指向前驱节点的指针</span>
<span class="token punctuation">}</span>

<span class="token comment">// NewDoublyListNode 初始化</span>
<span class="token keyword">func</span> <span class="token function">NewDoublyListNode</span><span class="token punctuation">(</span>val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>DoublyListNode <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>DoublyListNode<span class="token punctuation">{</span>
        Val<span class="token punctuation">:</span>  val<span class="token punctuation">,</span>
        Next<span class="token punctuation">:</span> <span class="token boolean">nil</span><span class="token punctuation">,</span>
        Prev<span class="token punctuation">:</span> <span class="token boolean">nil</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>type</code> 名称 <code>struct</code>。</li><li><em>注意大小写</em>！</li><li>结构体中，连<code>：</code>都不用。</li><li>指针类型：名称 <code>*</code>结构体。</li><li>初始化 方法/函数 <ol><li>返回值为指针：<code>*</code>结构体（指对象）</li><li>实例化对象：return <code>&amp;</code>结构体<code>{</code>..<code>}</code>（引用，指对象） <ol><li>1+2 =&gt; *结构体(指针) = &amp;结构体(该对象)</li></ol></li><li>实例化内容：成员名称<code>：</code>赋值</li></ol></li><li>空值：<code>nil</code></li></ol><h2 id="c" tabindex="-1"><a class="header-anchor" href="#c"><span>C</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>               <span class="token comment">// 节点值</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span> <span class="token comment">// 指向后继节点的指针</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>prev<span class="token punctuation">;</span> <span class="token comment">// 指向前驱节点的指针</span>
<span class="token punctuation">}</span> ListNode<span class="token punctuation">;</span>

ListNode <span class="token operator">*</span><span class="token function">newListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ListNode <span class="token operator">*</span>node<span class="token punctuation">;</span>
    node <span class="token operator">=</span> <span class="token punctuation">(</span>ListNode <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ListNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>typedef struct</code> 名称 { <ol><li>指针类型：<strong>struct</strong> 声明结构体 <code>*</code>名称。</li><li>} <strong>名称</strong>+<code>；</code></li></ol></li><li>方法中，指针类型：结构体 <code>*</code>名称。 <ol><li>开辟空间：node = (结构体 *) malloc(sizeof(结构体));</li><li>变量<code>-&gt;</code>成员 = 赋值;</li></ol></li><li>空值：<code>NULL</code></li></ol><h1 id="coding" tabindex="-1"><a class="header-anchor" href="#coding"><span>coding</span></a></h1><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,18),p=[o];function l(c,i){return a(),s("div",null,p)}const u=n(t,[["render",l],["__file","coding.html.vue"]]),r=JSON.parse('{"path":"/HelloAlgo/ForMyOwn/coding.html","title":"创建类 class","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Python","slug":"python","link":"#python","children":[]},{"level":2,"title":"CPP","slug":"cpp","link":"#cpp","children":[]},{"level":2,"title":"Java","slug":"java","link":"#java","children":[]},{"level":2,"title":"Go","slug":"go","link":"#go","children":[]},{"level":2,"title":"C","slug":"c","link":"#c","children":[]}],"git":{"createdTime":1715871421000,"updatedTime":1715871421000,"contributors":[{"name":"OnePiece","email":"109900456+NgxuAnGMH@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":1.72,"words":517},"filePathRelative":"HelloAlgo/ForMyOwn/coding.md","localizedDate":"2024年5月16日","excerpt":"\\n<h2>Python</h2>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">ListNode</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__init__</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> val<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        self<span class=\\"token punctuation\\">.</span>val<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">int</span> <span class=\\"token operator\\">=</span> val                <span class=\\"token comment\\"># 节点值</span>\\n        self<span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">next</span><span class=\\"token punctuation\\">:</span> ListNode <span class=\\"token operator\\">|</span> <span class=\\"token boolean\\">None</span> <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">None</span>  <span class=\\"token comment\\"># 指向后继节点的引用</span>\\n        self<span class=\\"token punctuation\\">.</span>prev<span class=\\"token punctuation\\">:</span> ListNode <span class=\\"token operator\\">|</span> <span class=\\"token boolean\\">None</span> <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">None</span>  <span class=\\"token comment\\"># 指向前驱节点的引用</span>\\n</code></pre></div>"}');export{u as comp,r as data};
