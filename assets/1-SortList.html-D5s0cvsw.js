import{_ as n,c as s,o as a,a as p}from"./app-DC88ES73.js";const t={},e=p(`<h1 id="可排序列表-sortlist" tabindex="-1"><a class="header-anchor" href="#可排序列表-sortlist"><span>可排序列表 SortList</span></a></h1><h2 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyList</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;列表类&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;构造方法&quot;&quot;&quot;</span>
        self<span class="token punctuation">.</span>_capacity<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>  <span class="token comment"># 列表容量</span>
        self<span class="token punctuation">.</span>_arr<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>_capacity  <span class="token comment"># 数组（存储列表元素）</span>
        self<span class="token punctuation">.</span>_size<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 列表长度（当前元素数量）</span>
        self<span class="token punctuation">.</span>_extend_ratio<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">2</span>  <span class="token comment"># 每次列表扩容的倍数</span>

    <span class="token keyword">def</span> <span class="token function">size</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;获取列表长度（当前元素数量）&quot;&quot;&quot;</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_size

    <span class="token keyword">def</span> <span class="token function">capacity</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;获取列表容量&quot;&quot;&quot;</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_capacity

    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;访问元素&quot;&quot;&quot;</span>
        <span class="token comment"># 索引如果越界，则抛出异常，下同</span>
        <span class="token keyword">if</span> index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> index <span class="token operator">&gt;=</span> self<span class="token punctuation">.</span>_size<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> IndexError<span class="token punctuation">(</span><span class="token string">&quot;索引越界&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">set</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;更新元素&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> index <span class="token operator">&gt;=</span> self<span class="token punctuation">.</span>_size<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> IndexError<span class="token punctuation">(</span><span class="token string">&quot;索引越界&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>_arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> num

    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;在尾部添加元素&quot;&quot;&quot;</span>
        <span class="token comment"># 元素数量超出容量时，触发扩容机制</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>capacity<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>extend_capacity<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>_arr<span class="token punctuation">[</span>self<span class="token punctuation">.</span>_size<span class="token punctuation">]</span> <span class="token operator">=</span> num
        self<span class="token punctuation">.</span>_size <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;在中间插入元素&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> index <span class="token operator">&gt;=</span> self<span class="token punctuation">.</span>_size<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> IndexError<span class="token punctuation">(</span><span class="token string">&quot;索引越界&quot;</span><span class="token punctuation">)</span>
        <span class="token comment"># 元素数量超出容量时，触发扩容机制</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_size <span class="token operator">==</span> self<span class="token punctuation">.</span>capacity<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>extend_capacity<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># 将索引 index 以及之后的元素都向后移动一位</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>_arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>_arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>_arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> num
        <span class="token comment"># 更新元素数量</span>
        self<span class="token punctuation">.</span>_size <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token keyword">def</span> <span class="token function">remove</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;删除元素&quot;&quot;&quot;</span>
        <span class="token keyword">if</span> index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> index <span class="token operator">&gt;=</span> self<span class="token punctuation">.</span>_size<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> IndexError<span class="token punctuation">(</span><span class="token string">&quot;索引越界&quot;</span><span class="token punctuation">)</span>
        num <span class="token operator">=</span> self<span class="token punctuation">.</span>_arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
        <span class="token comment"># 将索引 index 之后的元素都向前移动一位</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>_arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>_arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token comment"># 更新元素数量</span>
        self<span class="token punctuation">.</span>_size <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token comment"># 返回被删除的元素</span>
        <span class="token keyword">return</span> num

    <span class="token keyword">def</span> <span class="token function">extend_capacity</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;列表扩容&quot;&quot;&quot;</span>
        <span class="token comment"># 新建一个长度为原数组 _extend_ratio 倍的新数组，并将原数组复制到新数组</span>
        self<span class="token punctuation">.</span>_arr <span class="token operator">=</span> self<span class="token punctuation">.</span>_arr <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>capacity<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>_extend_ratio <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token comment"># 更新列表容量</span>
        self<span class="token punctuation">.</span>_capacity <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_arr<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">to_array</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;返回有效长度的列表&quot;&quot;&quot;</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_arr<span class="token punctuation">[</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>_size<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>声明为<code>class</code>，没有 <code>；</code>只有 <code>：</code>。</li><li><code>def __init__</code>传进去的是 <code>self 指针</code>，以及其他构造参数。</li><li>self.<code>val: int</code>，是一个整体，直接 = val。</li><li>其余的则是 self.next<code>:</code> ListNode。</li><li>空值：<code>None</code></li></ol><h2 id="cpp" tabindex="-1"><a class="header-anchor" href="#cpp"><span>CPP</span></a></h2><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/* 列表类 */</span>
<span class="token keyword">class</span> <span class="token class-name">MyList</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">;</span>             <span class="token comment">// 数组（存储列表元素）</span>
    <span class="token keyword">int</span> arrCapacity <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 列表容量</span>
    <span class="token keyword">int</span> arrSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment">// 列表长度（当前元素数量）</span>
    <span class="token keyword">int</span> extendRatio <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token comment">// 每次列表扩容的倍数</span>

  <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">/* 构造方法 */</span>
    <span class="token function">MyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arrCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 析构方法 */</span>
    <span class="token operator">~</span><span class="token function">MyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 获取列表长度（当前元素数量）*/</span>
    <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> arrSize<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 获取列表容量 */</span>
    <span class="token keyword">int</span> <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> arrCapacity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 访问元素 */</span>
    <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 索引如果越界，则抛出异常，下同</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token function">out_of_range</span><span class="token punctuation">(</span><span class="token string">&quot;索引越界&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 更新元素 */</span>
    <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token function">out_of_range</span><span class="token punctuation">(</span><span class="token string">&quot;索引越界&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 在尾部添加元素 */</span>
    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 元素数量超出容量时，触发扩容机制</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token function">extendCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        arr<span class="token punctuation">[</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>
        <span class="token comment">// 更新元素数量</span>
        arrSize<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 在中间插入元素 */</span>
    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token function">out_of_range</span><span class="token punctuation">(</span><span class="token string">&quot;索引越界&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 元素数量超出容量时，触发扩容机制</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token function">extendCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将索引 index 以及之后的元素都向后移动一位</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> index<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>
        <span class="token comment">// 更新元素数量</span>
        arrSize<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 删除元素 */</span>
    <span class="token keyword">int</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token function">out_of_range</span><span class="token punctuation">(</span><span class="token string">&quot;索引越界&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 将索引 index 之后的元素都向前移动一位</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> index<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 更新元素数量</span>
        arrSize<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token comment">// 返回被删除的元素</span>
        <span class="token keyword">return</span> num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 列表扩容 */</span>
    <span class="token keyword">void</span> <span class="token function">extendCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 新建一个长度为原数组 extendRatio 倍的新数组</span>
        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> extendRatio<span class="token punctuation">;</span>
        <span class="token keyword">int</span> <span class="token operator">*</span>tmp <span class="token operator">=</span> arr<span class="token punctuation">;</span>
        arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>newCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 将原数组中的所有元素复制到新数组</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 释放内存</span>
        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmp<span class="token punctuation">;</span>
        arrCapacity <span class="token operator">=</span> newCapacity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 将列表转换为 Vector 用于打印 */</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">toVector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 仅转换有效长度范围内的列表元素</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">vec</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> vec<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>开头声明是 <code>struct</code>。</p><ol><li>定义处最后，也要加一个<code>；</code>。</li></ol></li><li><p>指针类型：结构体 <code>*</code>名称。</p></li><li><p>构造函数简写成<code>：</code>，填充参数值<code>名称（）</code>，然后直接 <code>{}</code>。</p></li><li><p>空值：<code>nullptr</code></p></li></ol><h2 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>Java</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">/* 列表类 */</span>
<span class="token keyword">class</span> <span class="token class-name">MyList</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span> <span class="token comment">// 数组（存储列表元素）</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> capacity <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 列表容量</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 列表长度（当前元素数量）</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> extendRatio <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 每次列表扩容的倍数</span>

    <span class="token comment">/* 构造方法 */</span>
    <span class="token keyword">public</span> <span class="token class-name">MyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 获取列表长度（当前元素数量） */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> size<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 获取列表容量 */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> capacity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 访问元素 */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 索引如果越界，则抛出异常，下同</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">&quot;索引越界&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 更新元素 */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">&quot;索引越界&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 在尾部添加元素 */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 元素数量超出容量时，触发扩容机制</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token function">extendCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        arr<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>
        <span class="token comment">// 更新元素数量</span>
        size<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 在中间插入元素 */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">&quot;索引越界&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 元素数量超出容量时，触发扩容机制</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token function">extendCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将索引 index 以及之后的元素都向后移动一位</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> index<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>
        <span class="token comment">// 更新元素数量</span>
        size<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 删除元素 */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">&quot;索引越界&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 将将索引 index 之后的元素都向前移动一位</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> index<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 更新元素数量</span>
        size<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token comment">// 返回被删除的元素</span>
        <span class="token keyword">return</span> num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 列表扩容 */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">extendCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 新建一个长度为原数组 extendRatio 倍的新数组，并将原数组复制到新数组</span>
        arr <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> extendRatio<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 更新列表容量</span>
        capacity <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 将列表转换为数组 */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 仅转换有效长度范围内的列表元素</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>Java 中没有 * 和 &amp;</li></ol><h2 id="go" tabindex="-1"><a class="header-anchor" href="#go"><span>Go</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">/* 列表类 */</span>
<span class="token keyword">type</span> myList <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    arrCapacity <span class="token builtin">int</span>
    arr         <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
    arrSize     <span class="token builtin">int</span>
    extendRatio <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 构造函数 */</span>
<span class="token keyword">func</span> <span class="token function">newMyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>myList <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>myList<span class="token punctuation">{</span>
        arrCapacity<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>              <span class="token comment">// 列表容量</span>
        arr<span class="token punctuation">:</span>         <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 数组（存储列表元素）</span>
        arrSize<span class="token punctuation">:</span>     <span class="token number">0</span><span class="token punctuation">,</span>               <span class="token comment">// 列表长度（当前元素数量）</span>
        extendRatio<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>               <span class="token comment">// 每次列表扩容的倍数</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 获取列表长度（当前元素数量） */</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>myList<span class="token punctuation">)</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> l<span class="token punctuation">.</span>arrSize
<span class="token punctuation">}</span>

<span class="token comment">/*  获取列表容量 */</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>myList<span class="token punctuation">)</span> <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> l<span class="token punctuation">.</span>arrCapacity
<span class="token punctuation">}</span>

<span class="token comment">/* 访问元素 */</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>myList<span class="token punctuation">)</span> <span class="token function">get</span><span class="token punctuation">(</span>index <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    <span class="token comment">// 索引如果越界，则抛出异常，下同</span>
    <span class="token keyword">if</span> index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;=</span> l<span class="token punctuation">.</span>arrSize <span class="token punctuation">{</span>
        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;索引越界&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> l<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 更新元素 */</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>myList<span class="token punctuation">)</span> <span class="token function">set</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> index <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;=</span> l<span class="token punctuation">.</span>arrSize <span class="token punctuation">{</span>
        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;索引越界&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    l<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> num
<span class="token punctuation">}</span>

<span class="token comment">/* 在尾部添加元素 */</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>myList<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 元素数量超出容量时，触发扩容机制</span>
    <span class="token keyword">if</span> l<span class="token punctuation">.</span>arrSize <span class="token operator">==</span> l<span class="token punctuation">.</span>arrCapacity <span class="token punctuation">{</span>
        l<span class="token punctuation">.</span><span class="token function">extendCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    l<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">.</span>arrSize<span class="token punctuation">]</span> <span class="token operator">=</span> num
    <span class="token comment">// 更新元素数量</span>
    l<span class="token punctuation">.</span>arrSize<span class="token operator">++</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 在中间插入元素 */</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>myList<span class="token punctuation">)</span> <span class="token function">insert</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> index <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;=</span> l<span class="token punctuation">.</span>arrSize <span class="token punctuation">{</span>
        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;索引越界&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 元素数量超出容量时，触发扩容机制</span>
    <span class="token keyword">if</span> l<span class="token punctuation">.</span>arrSize <span class="token operator">==</span> l<span class="token punctuation">.</span>arrCapacity <span class="token punctuation">{</span>
        l<span class="token punctuation">.</span><span class="token function">extendCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 将索引 index 以及之后的元素都向后移动一位</span>
    <span class="token keyword">for</span> j <span class="token operator">:=</span> l<span class="token punctuation">.</span>arrSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> index<span class="token punctuation">;</span> j<span class="token operator">--</span> <span class="token punctuation">{</span>
        l<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    l<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> num
    <span class="token comment">// 更新元素数量</span>
    l<span class="token punctuation">.</span>arrSize<span class="token operator">++</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 删除元素 */</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>myList<span class="token punctuation">)</span> <span class="token function">remove</span><span class="token punctuation">(</span>index <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;=</span> l<span class="token punctuation">.</span>arrSize <span class="token punctuation">{</span>
        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;索引越界&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    num <span class="token operator">:=</span> l<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
    <span class="token comment">// 将索引 index 之后的元素都向前移动一位</span>
    <span class="token keyword">for</span> j <span class="token operator">:=</span> index<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> l<span class="token punctuation">.</span>arrSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
        l<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 更新元素数量</span>
    l<span class="token punctuation">.</span>arrSize<span class="token operator">--</span>
    <span class="token comment">// 返回被删除的元素</span>
    <span class="token keyword">return</span> num
<span class="token punctuation">}</span>

<span class="token comment">/* 列表扩容 */</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>myList<span class="token punctuation">)</span> <span class="token function">extendCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 新建一个长度为原数组 extendRatio 倍的新数组，并将原数组复制到新数组</span>
    l<span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>arr<span class="token punctuation">,</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span>arrCapacity<span class="token operator">*</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>extendRatio<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>
    <span class="token comment">// 更新列表容量</span>
    l<span class="token punctuation">.</span>arrCapacity <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>arr<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 返回有效长度的列表 */</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>myList<span class="token punctuation">)</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
    <span class="token comment">// 仅转换有效长度范围内的列表元素</span>
    <span class="token keyword">return</span> l<span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span>l<span class="token punctuation">.</span>arrSize<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>type</code> 名称 <code>struct</code>。</li><li><em>注意大小写</em>！</li><li>结构体中，连<code>：</code>都不用。</li><li>指针类型：名称 <code>*</code>结构体。</li><li>初始化 方法/函数 <ol><li>返回值为指针：<code>*</code>结构体（指对象）</li><li>实例化对象：return <code>&amp;</code>结构体<code>{</code>..<code>}</code>（引用，指对象） <ol><li>1+2 =&gt; *结构体(指针) = &amp;结构体(该对象)</li></ol></li><li>实例化内容：成员名称<code>：</code>赋值</li></ol></li><li>空值：<code>nil</code></li></ol><h2 id="c" tabindex="-1"><a class="header-anchor" href="#c"><span>C</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 列表类 */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">;</span>        <span class="token comment">// 数组（存储列表元素）</span>
    <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>    <span class="token comment">// 列表容量</span>
    <span class="token keyword">int</span> size<span class="token punctuation">;</span>        <span class="token comment">// 列表大小</span>
    <span class="token keyword">int</span> extendRatio<span class="token punctuation">;</span> <span class="token comment">// 列表每次扩容的倍数</span>
<span class="token punctuation">}</span> MyList<span class="token punctuation">;</span>

<span class="token comment">/* 构造函数 */</span>
MyList <span class="token operator">*</span><span class="token function">newMyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    MyList <span class="token operator">*</span>nums <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>MyList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    nums<span class="token operator">-&gt;</span>capacity <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    nums<span class="token operator">-&gt;</span>arr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> nums<span class="token operator">-&gt;</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    nums<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    nums<span class="token operator">-&gt;</span>extendRatio <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 析构函数 */</span>
<span class="token keyword">void</span> <span class="token function">delMyList</span><span class="token punctuation">(</span>MyList <span class="token operator">*</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">free</span><span class="token punctuation">(</span>nums<span class="token operator">-&gt;</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 获取列表长度 */</span>
<span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span>MyList <span class="token operator">*</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> nums<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 获取列表容量 */</span>
<span class="token keyword">int</span> <span class="token function">capacity</span><span class="token punctuation">(</span>MyList <span class="token operator">*</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> nums<span class="token operator">-&gt;</span>capacity<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 访问元素 */</span>
<span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span>MyList <span class="token operator">*</span>nums<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> nums<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> nums<span class="token operator">-&gt;</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 更新元素 */</span>
<span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>MyList <span class="token operator">*</span>nums<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> nums<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    nums<span class="token operator">-&gt;</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 在尾部添加元素 */</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>MyList <span class="token operator">*</span>nums<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">capacity</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">extendCapacity</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 扩容</span>
    <span class="token punctuation">}</span>
    nums<span class="token operator">-&gt;</span>arr<span class="token punctuation">[</span><span class="token function">size</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>
    nums<span class="token operator">-&gt;</span>size<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 在中间插入元素 */</span>
<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>MyList <span class="token operator">*</span>nums<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> <span class="token function">size</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 元素数量超出容量时，触发扩容机制</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">capacity</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">extendCapacity</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 扩容</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> index<span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        nums<span class="token operator">-&gt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token operator">-&gt;</span>arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    nums<span class="token operator">-&gt;</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>
    nums<span class="token operator">-&gt;</span>size<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 删除元素 */</span>
<span class="token comment">// 注意：stdio.h 占用了 remove 关键词</span>
<span class="token keyword">int</span> <span class="token function">removeItem</span><span class="token punctuation">(</span>MyList <span class="token operator">*</span>nums<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> <span class="token function">size</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> nums<span class="token operator">-&gt;</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">size</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        nums<span class="token operator">-&gt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token operator">-&gt;</span>arr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    nums<span class="token operator">-&gt;</span>size<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> num<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 列表扩容 */</span>
<span class="token keyword">void</span> <span class="token function">extendCapacity</span><span class="token punctuation">(</span>MyList <span class="token operator">*</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 先分配空间</span>
    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> <span class="token function">capacity</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">*</span> nums<span class="token operator">-&gt;</span>extendRatio<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>extend <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>temp <span class="token operator">=</span> nums<span class="token operator">-&gt;</span>arr<span class="token punctuation">;</span>

    <span class="token comment">// 拷贝旧数据到新数据</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">size</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        extend<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token operator">-&gt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// 释放旧数据</span>
    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 更新新数据</span>
    nums<span class="token operator">-&gt;</span>arr <span class="token operator">=</span> extend<span class="token punctuation">;</span>
    nums<span class="token operator">-&gt;</span>capacity <span class="token operator">=</span> newCapacity<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 将列表转换为 Array 用于打印 */</span>
<span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">toArray</span><span class="token punctuation">(</span>MyList <span class="token operator">*</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> nums<span class="token operator">-&gt;</span>arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>typedef struct</code> 名称 { <ol><li>指针类型：<strong>struct</strong> 声明结构体 <code>*</code>名称。</li><li>} <strong>名称</strong>+<code>；</code></li></ol></li><li>方法中，指针类型：结构体 <code>*</code>名称。 <ol><li>开辟空间：node = (结构体 *) malloc(sizeof(结构体));</li><li>变量<code>-&gt;</code>成员 = 赋值;</li></ol></li><li>空值：<code>NULL</code></li></ol>`,16),o=[e];function c(i,l){return a(),s("div",null,o)}const k=n(t,[["render",c],["__file","1-SortList.html.vue"]]),r=JSON.parse('{"path":"/HelloAlgo/ForMyOwn/1-SortList.html","title":"可排序列表 SortList","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Python","slug":"python","link":"#python","children":[]},{"level":2,"title":"CPP","slug":"cpp","link":"#cpp","children":[]},{"level":2,"title":"Java","slug":"java","link":"#java","children":[]},{"level":2,"title":"Go","slug":"go","link":"#go","children":[]},{"level":2,"title":"C","slug":"c","link":"#c","children":[]}],"git":{"createdTime":1715871421000,"updatedTime":1715871421000,"contributors":[{"name":"OnePiece","email":"109900456+NgxuAnGMH@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":8.56,"words":2568},"filePathRelative":"HelloAlgo/ForMyOwn/1-SortList.md","localizedDate":"2024年5月16日","excerpt":"\\n<h2>Python</h2>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MyList</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token triple-quoted-string string\\">\\"\\"\\"列表类\\"\\"\\"</span>\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__init__</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token triple-quoted-string string\\">\\"\\"\\"构造方法\\"\\"\\"</span>\\n        self<span class=\\"token punctuation\\">.</span>_capacity<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">int</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">10</span>  <span class=\\"token comment\\"># 列表容量</span>\\n        self<span class=\\"token punctuation\\">.</span>_arr<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">list</span><span class=\\"token punctuation\\">[</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">*</span> self<span class=\\"token punctuation\\">.</span>_capacity  <span class=\\"token comment\\"># 数组（存储列表元素）</span>\\n        self<span class=\\"token punctuation\\">.</span>_size<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">int</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span>  <span class=\\"token comment\\"># 列表长度（当前元素数量）</span>\\n        self<span class=\\"token punctuation\\">.</span>_extend_ratio<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">int</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2</span>  <span class=\\"token comment\\"># 每次列表扩容的倍数</span>\\n\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token triple-quoted-string string\\">\\"\\"\\"获取列表长度（当前元素数量）\\"\\"\\"</span>\\n        <span class=\\"token keyword\\">return</span> self<span class=\\"token punctuation\\">.</span>_size\\n\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">capacity</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token triple-quoted-string string\\">\\"\\"\\"获取列表容量\\"\\"\\"</span>\\n        <span class=\\"token keyword\\">return</span> self<span class=\\"token punctuation\\">.</span>_capacity\\n\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> index<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token triple-quoted-string string\\">\\"\\"\\"访问元素\\"\\"\\"</span>\\n        <span class=\\"token comment\\"># 索引如果越界，则抛出异常，下同</span>\\n        <span class=\\"token keyword\\">if</span> index <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span> <span class=\\"token keyword\\">or</span> index <span class=\\"token operator\\">&gt;=</span> self<span class=\\"token punctuation\\">.</span>_size<span class=\\"token punctuation\\">:</span>\\n            <span class=\\"token keyword\\">raise</span> IndexError<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"索引越界\\"</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">return</span> self<span class=\\"token punctuation\\">.</span>_arr<span class=\\"token punctuation\\">[</span>index<span class=\\"token punctuation\\">]</span>\\n\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">set</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> num<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">,</span> index<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token triple-quoted-string string\\">\\"\\"\\"更新元素\\"\\"\\"</span>\\n        <span class=\\"token keyword\\">if</span> index <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span> <span class=\\"token keyword\\">or</span> index <span class=\\"token operator\\">&gt;=</span> self<span class=\\"token punctuation\\">.</span>_size<span class=\\"token punctuation\\">:</span>\\n            <span class=\\"token keyword\\">raise</span> IndexError<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"索引越界\\"</span><span class=\\"token punctuation\\">)</span>\\n        self<span class=\\"token punctuation\\">.</span>_arr<span class=\\"token punctuation\\">[</span>index<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> num\\n\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> num<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token triple-quoted-string string\\">\\"\\"\\"在尾部添加元素\\"\\"\\"</span>\\n        <span class=\\"token comment\\"># 元素数量超出容量时，触发扩容机制</span>\\n        <span class=\\"token keyword\\">if</span> self<span class=\\"token punctuation\\">.</span>size<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> self<span class=\\"token punctuation\\">.</span>capacity<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n            self<span class=\\"token punctuation\\">.</span>extend_capacity<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        self<span class=\\"token punctuation\\">.</span>_arr<span class=\\"token punctuation\\">[</span>self<span class=\\"token punctuation\\">.</span>_size<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> num\\n        self<span class=\\"token punctuation\\">.</span>_size <span class=\\"token operator\\">+=</span> <span class=\\"token number\\">1</span>\\n\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">insert</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> num<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">,</span> index<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token triple-quoted-string string\\">\\"\\"\\"在中间插入元素\\"\\"\\"</span>\\n        <span class=\\"token keyword\\">if</span> index <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span> <span class=\\"token keyword\\">or</span> index <span class=\\"token operator\\">&gt;=</span> self<span class=\\"token punctuation\\">.</span>_size<span class=\\"token punctuation\\">:</span>\\n            <span class=\\"token keyword\\">raise</span> IndexError<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"索引越界\\"</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token comment\\"># 元素数量超出容量时，触发扩容机制</span>\\n        <span class=\\"token keyword\\">if</span> self<span class=\\"token punctuation\\">.</span>_size <span class=\\"token operator\\">==</span> self<span class=\\"token punctuation\\">.</span>capacity<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n            self<span class=\\"token punctuation\\">.</span>extend_capacity<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token comment\\"># 将索引 index 以及之后的元素都向后移动一位</span>\\n        <span class=\\"token keyword\\">for</span> j <span class=\\"token keyword\\">in</span> <span class=\\"token builtin\\">range</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>_size <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> index <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n            self<span class=\\"token punctuation\\">.</span>_arr<span class=\\"token punctuation\\">[</span>j <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>_arr<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span>\\n        self<span class=\\"token punctuation\\">.</span>_arr<span class=\\"token punctuation\\">[</span>index<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> num\\n        <span class=\\"token comment\\"># 更新元素数量</span>\\n        self<span class=\\"token punctuation\\">.</span>_size <span class=\\"token operator\\">+=</span> <span class=\\"token number\\">1</span>\\n\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">remove</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> index<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token triple-quoted-string string\\">\\"\\"\\"删除元素\\"\\"\\"</span>\\n        <span class=\\"token keyword\\">if</span> index <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span> <span class=\\"token keyword\\">or</span> index <span class=\\"token operator\\">&gt;=</span> self<span class=\\"token punctuation\\">.</span>_size<span class=\\"token punctuation\\">:</span>\\n            <span class=\\"token keyword\\">raise</span> IndexError<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"索引越界\\"</span><span class=\\"token punctuation\\">)</span>\\n        num <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>_arr<span class=\\"token punctuation\\">[</span>index<span class=\\"token punctuation\\">]</span>\\n        <span class=\\"token comment\\"># 将索引 index 之后的元素都向前移动一位</span>\\n        <span class=\\"token keyword\\">for</span> j <span class=\\"token keyword\\">in</span> <span class=\\"token builtin\\">range</span><span class=\\"token punctuation\\">(</span>index<span class=\\"token punctuation\\">,</span> self<span class=\\"token punctuation\\">.</span>_size <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n            self<span class=\\"token punctuation\\">.</span>_arr<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>_arr<span class=\\"token punctuation\\">[</span>j <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span>\\n        <span class=\\"token comment\\"># 更新元素数量</span>\\n        self<span class=\\"token punctuation\\">.</span>_size <span class=\\"token operator\\">-=</span> <span class=\\"token number\\">1</span>\\n        <span class=\\"token comment\\"># 返回被删除的元素</span>\\n        <span class=\\"token keyword\\">return</span> num\\n\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">extend_capacity</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token triple-quoted-string string\\">\\"\\"\\"列表扩容\\"\\"\\"</span>\\n        <span class=\\"token comment\\"># 新建一个长度为原数组 _extend_ratio 倍的新数组，并将原数组复制到新数组</span>\\n        self<span class=\\"token punctuation\\">.</span>_arr <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>_arr <span class=\\"token operator\\">+</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">*</span> self<span class=\\"token punctuation\\">.</span>capacity<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">*</span> <span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>_extend_ratio <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token comment\\"># 更新列表容量</span>\\n        self<span class=\\"token punctuation\\">.</span>_capacity <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">len</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>_arr<span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">to_array</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token builtin\\">list</span><span class=\\"token punctuation\\">[</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token triple-quoted-string string\\">\\"\\"\\"返回有效长度的列表\\"\\"\\"</span>\\n        <span class=\\"token keyword\\">return</span> self<span class=\\"token punctuation\\">.</span>_arr<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">:</span> self<span class=\\"token punctuation\\">.</span>_size<span class=\\"token punctuation\\">]</span>\\n</code></pre></div>"}');export{k as comp,r as data};
