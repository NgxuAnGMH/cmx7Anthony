import{_ as n,c as l,o as e,d as a,a as t,b as s}from"./app-C4v31drI.js";const i="/assets/classification_logic_structure-C1r13P3n.png",o="/assets/computer_memory_location-BigZg4uS.png",r="/assets/classification_phisical_structure-DckOS0zK.png",c={},p=a('<h1 id="数据结构分类" tabindex="-1"><a class="header-anchor" href="#数据结构分类"><span>数据结构分类</span></a></h1><p>常见的数据结构包括数组、链表、栈、队列、哈希表、树、堆、图，它们可以从“逻辑结构”和“物理结构”两个维度进行分类。</p><h2 id="逻辑结构-线性与非线性" tabindex="-1"><a class="header-anchor" href="#逻辑结构-线性与非线性"><span>逻辑结构：线性与非线性</span></a></h2><p><strong>逻辑结构揭示了数据元素之间的逻辑关系</strong>。</p><ol><li>在数组和链表中，数据按照一定顺序排列，体现了数据之间的线性关系；</li><li>而在树中，数据从顶部向下按层次排列，表现出“祖先”与“后代”之间的派生关系；</li><li>图则由节点和边构成，反映了复杂的网络关系。</li></ol><p>如下图所示，逻辑结构可分为“线性”和“非线性”两大类。线性结构比较直观，指数据在逻辑关系上呈线性排列；非线性结构则相反，呈非线性排列。</p><ul><li><strong>线性数据结构</strong>：数组、链表、栈、队列、哈希表，元素之间是一对一的顺序关系。</li><li><strong>非线性数据结构</strong>：树、堆、图、哈希表。</li></ul><p>非线性数据结构可以进一步划分为树形结构和网状结构。</p><ul><li><strong>树形结构</strong>：树、堆、哈希表，元素之间是一对多的关系。</li><li><strong>网状结构</strong>：图，元素之间是多对多的关系。</li></ul><figure><img src="'+i+'" alt="线性数据结构与非线性数据结构" tabindex="0" loading="lazy"><figcaption>线性数据结构与非线性数据结构</figcaption></figure><h2 id="物理结构-连续与分散" tabindex="-1"><a class="header-anchor" href="#物理结构-连续与分散"><span>物理结构：连续与分散</span></a></h2><p><strong>当算法程序运行时，正在处理的数据主要存储在内存中</strong>。下图展示了一个计算机内存条，其中每个黑色方块都包含一块内存空间。我们可以将内存想象成一个巨大的 Excel 表格，其中每个单元格都可以存储一定大小的数据。</p><p><strong>系统通过内存地址来访问目标位置的数据</strong>。如下图所示，计算机根据特定规则为表格中的每个单元格分配编号，确保每个内存空间都有唯一的内存地址。有了这些地址，程序便可以访问内存中的数据。</p><figure><img src="'+o+`" alt="内存条、内存空间、内存地址" tabindex="0" loading="lazy"><figcaption>内存条、内存空间、内存地址</figcaption></figure><p>!!! tip</p><pre><code>值得说明的是，将内存比作 Excel 表格是一个简化的类比，实际内存的工作机制比较复杂，涉及地址空间、内存管理、缓存机制、虚拟内存和物理内存等概念。
</code></pre><p>内存是所有程序的共享资源，当某块内存被某个程序占用时，则无法被其他程序同时使用了。<strong>因此在数据结构与算法的设计中，内存资源是一个重要的考虑因素</strong>。比如，<u>算法所占用的内存峰值</u>不应超过系统剩余空闲内存；<em>如果缺少连续大块的内存空间</em>，那么所选用的数据结构必须能够存储在分散的内存空间内。</p><p>如下图所示，<strong>物理结构反映了数据在计算机内存中的存储方式</strong>，可分为连续空间存储（数组）和分散空间存储（链表）。物理结构从底层决定了数据的访问、更新、增删等操作方法，两种物理结构在时间效率和空间效率方面呈现出互补的特点。</p><figure><img src="`+r+'" alt="连续空间存储与分散空间存储" tabindex="0" loading="lazy"><figcaption>连续空间存储与分散空间存储</figcaption></figure><p>值得说明的是，<strong>所有数据结构都是基于数组、链表或二者的组合实现的</strong>。例如，栈和队列既可以使用数组实现，也可以使用链表实现；而哈希表的实现可能同时包含数组和链表。</p>',20),g=t("ul",null,[t("li",null,[t("strong",null,"基于数组可实现"),s("：栈、队列、哈希表、树、堆、图、矩阵、张量（维度 "),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("mo",null,"≥"),t("mn",null,"3")]),t("annotation",{encoding:"application/x-tex"},"\\geq 3")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.7719em","vertical-align":"-0.136em"}}),t("span",{class:"mrel"},"≥"),t("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.6444em"}}),t("span",{class:"mord"},"3")])])]),s(" 的数组）等。")]),t("li",null,[t("strong",null,"基于链表可实现"),s("：栈、队列、哈希表、树、堆、图等。")])],-1),h=t("p",null,[s("链表在初始化后，仍可以在程序运行过程中对其长度进行调整，因此也称“动态数据结构”。数组在初始化后长度不可变，因此也称“静态数据结构”。值得注意的是，数组可通过"),t("em",null,"重新分配内存"),s("实现长度变化，从而具备一定的“动态性”。")],-1),m=t("p",null,"!!! tip",-1),u=t("pre",null,[t("code",null,`如果你感觉物理结构理解起来有困难，建议先阅读下一章，然后再回顾本节内容。
`)],-1),d=[p,g,h,m,u];function _(f,x){return e(),l("div",null,d)}const B=n(c,[["render",_],["__file","10-数据结构分类.html.vue"]]),b=JSON.parse('{"path":"/HelloAlgo/%E7%AC%AC03%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/10-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E7%B1%BB.html","title":"数据结构分类","lang":"zh-CN","frontmatter":{"date":"2024-05-16T00:00:00.000Z","shortTitle":"10-数据结构分类"},"headers":[{"level":2,"title":"逻辑结构：线性与非线性","slug":"逻辑结构-线性与非线性","link":"#逻辑结构-线性与非线性","children":[]},{"level":2,"title":"物理结构：连续与分散","slug":"物理结构-连续与分散","link":"#物理结构-连续与分散","children":[]}],"git":{"createdTime":1715869557000,"updatedTime":1715869557000,"contributors":[{"name":"OnePiece","email":"109900456+NgxuAnGMH@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":3.61,"words":1082},"filePathRelative":"HelloAlgo/第03章 数据结构/10-数据结构分类.md","localizedDate":"2024年5月16日","excerpt":"\\n<p>常见的数据结构包括数组、链表、栈、队列、哈希表、树、堆、图，它们可以从“逻辑结构”和“物理结构”两个维度进行分类。</p>\\n<h2>逻辑结构：线性与非线性</h2>\\n<p><strong>逻辑结构揭示了数据元素之间的逻辑关系</strong>。</p>\\n<ol>\\n<li>在数组和链表中，数据按照一定顺序排列，体现了数据之间的线性关系；</li>\\n<li>而在树中，数据从顶部向下按层次排列，表现出“祖先”与“后代”之间的派生关系；</li>\\n<li>图则由节点和边构成，反映了复杂的网络关系。</li>\\n</ol>\\n<p>如下图所示，逻辑结构可分为“线性”和“非线性”两大类。线性结构比较直观，指数据在逻辑关系上呈线性排列；非线性结构则相反，呈非线性排列。</p>"}');export{B as comp,b as data};
